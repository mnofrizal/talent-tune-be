// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SystemRole {
  ADMINISTRATOR
  USER
}

enum AssessmentStatus {
  CREATED
  SCHEDULED
  WAITING_CONFIRMATION
  TALENT_REQUIREMENTS
  READY_FOR_ASSESSMENT
  EVALUATING
  NEED_REVIEW
  DONE
    CANCELED // New status for canceled assessments
  RESCHEDULE
}

enum AssessmentRoleType {
  PARTICIPANT
  EVALUATOR
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  phone        String?
  password     String
  name         String
  nip          String     @unique
  systemRole   SystemRole @default(USER)
  jabatan      String
  bidang       String
  refreshToken String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  participations AssessmentParticipant[]

  @@map("users")
}

model AssessmentRole {
  id          Int               @id @default(autoincrement())
  name        AssessmentRoleType
  description String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  participants AssessmentParticipant[]

  @@map("assessment_roles")
}

model Assessment {
  id                 Int              @id @default(autoincrement())
  judul             String
  materi            String
  proyeksi          String
  metodePelaksanaan String
  ruangan           String
  linkMeeting       String?
  notaDinas         String
  schedule          DateTime
  expiredDate       DateTime
  status            AssessmentStatus @default(CREATED)
  isActive          Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relations
  participants AssessmentParticipant[]
  evaluations  Evaluation[]

  @@map("assessments")
}

model AssessmentParticipant {
  id               Int      @id @default(autoincrement())
  assessmentId     Int
  userId           Int
  assessmentRoleId Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  assessment           Assessment        @relation(fields: [assessmentId], references: [id])
  user                User              @relation(fields: [userId], references: [id])
  assessmentRole      AssessmentRole    @relation(fields: [assessmentRoleId], references: [id])
  submission          UserSubmission?   @relation("ParticipantSubmission")
  evaluationsGiven    Evaluation[]      @relation("evaluator")
  evaluationsReceived Evaluation[]      @relation("participant")

  @@unique([assessmentId, userId])
  @@map("assessment_participants")
}

model UserSubmission {
  id                     Int       @id @default(autoincrement())
  assessmentId           Int
  participantId          Int       @unique
  presentationFile               String?
  attendanceConfirmation Boolean   @default(false)
  questionnaireResponses Json?     // Store 5 question responses
  submittedAt           DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  participant AssessmentParticipant @relation("ParticipantSubmission", fields: [participantId], references: [id])

  @@map("user_submissions")
}

model Evaluation {
  id             Int       @id @default(autoincrement())
  assessmentId   Int
  evaluatorId    Int      // Reference to AssessmentParticipant with EVALUATOR role
  participantId  Int      // Reference to AssessmentParticipant with PARTICIPANT role
  scores         Json?    // Store 4 aspect scores
  recommendation String?   @db.Text
  submittedAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  assessment  Assessment           @relation(fields: [assessmentId], references: [id])
  evaluator   AssessmentParticipant @relation("evaluator", fields: [evaluatorId], references: [id])
  participant AssessmentParticipant @relation("participant", fields: [participantId], references: [id])

  @@unique([assessmentId, evaluatorId, participantId])
  @@map("evaluations")
}